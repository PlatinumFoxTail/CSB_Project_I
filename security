LINK: https://github.com/PlatinumFoxTail/CSB_Project_I

FLAW 1: 
Exact source link pinpointing flaw 1: 
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/96999f8c7453229fbd3107007d5682b8f0406280/src/pages/views.py#L23

Description of flaw 1:
The inserted flaw is Cross-site Request Forgery (CSRF). By marking the transfer view with the csrf_exempt decorator, Django does not
require a CSRF protection cookie. Imagine an attacker creates a malicious website with a hidden form that submits a POST request to 
the homePageView on the banktransfer application. The attacker fools an authenticated user to visit the malicious website. Since the 
homePageView is decorated with @csrf_exempt, the server will not require a CSRF token for the POST request. As a result, the user's 
browser unknowingly performs the financial transfer, resulting in unauthorized transactions without the user's approval.

How to fix flaw 1:
To fix the CSRF vulnerability, remove the @csrf_exempt decorator from the homePageView view.

FLAW 2:
Exact source link pinpointing flaw 2: 
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/6dd0c584ad9c5a76c13a0088560a3724096e6310/src/config/settings.py#L109

Description of flaw 2:
The inserted flaw is a Cryptographic Failure. The application is set to store passwords as unsalted MD5 (Message Digest Algorithm 5) 
hashes. MD5 is a cryptographic hash function that generates a 128-bit hash value from an input data of any length. It is not 
considered anymore secure for cryptographic purposes due to vulnerabilities that allow collisions (when two different inputs produce 
the same hash output) and ease of brute-force attacks. 
With an brute-force attack, an attacker could now try all possible combinations of characters to generate MD5 hashes and compare them 
to the hashed passwords in the database. Since MD5 is quite quick to compute, the attacker can quickly identify matching hashes for 
common passwords, even without the original password data, and get unauthorized access to user accounts.

How to fix flaw 2:
The flaw can be fixed by replacing the unsalted MD5 hash with storng adaptive and salted hashing functions with a work factor (delay 
factor) such as Argon2, scrypt, bcrypt or PBKDF2. These aforementioned are advised by OWASP 
(https://owasp.org/Top10/A02_2021-Cryptographic_Failures/) regarding dealing with cryptographic failures related to hash functions. 
Directly after the flaw as indicated in the link to the flaw, Argon2 hash is commented out. 

FLAW 3:
Exact source link pinpointing flaw 3:
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/0c46e0b772d1b6ad041c76c84abf69f15e04c940/src/pages/views.py#L29
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/0c46e0b772d1b6ad041c76c84abf69f15e04c940/src/pages/views.py#L30

Description of flaw 3:
In the existing application there is an Injection flaw. Since the sender and receiver variables are not sanitazied, an attacker 
could inject e.g. malicious scripts such as following <script>alert("The page has been hacked!")</script> that would show to the 
user that the page has been hacked.

How to fix flaw 3:
The flaw can be fixed by deleting the rows where the injection flaw occurs (the two links pinpointing flaw 3 above) and remove the 
comment # marks for the corresponding lines in the two rows below. By doing so, the escape functions in sanitizing the user inputs 
to decrease risk of injection flaws such as malcious scripts.

FLAW 4:
Exact source link pinpointing flaw 4:
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/e596348f9eb44139b561ca85a9052ddd8cbadffb/src/pages/views.py#L11
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/e596348f9eb44139b561ca85a9052ddd8cbadffb/src/pages/views.py#L25

Description of flaw 4:
In the existing application there is an Broken Acess Control flaw. The application lacks proper access control mechanisms, leading 
to a Broken Access Control vulnerability. Without the proper access control mechanisms, anyone including unauthorized users, can 
reach the homePageView and the transfer views and can do account transfer without authorization checks. The flaw could allow 
attackers to potentially manipulate account data or other misuses.

How to fix flaw 4:
The flaw can be fixed by inserting the @login_required decorators prior to the homePageView and transfer views, as can be seen in 
the links above where the decorators in question are commented out. The @login_required decorator will ensure authentication for 
both the homePageView and transfer views. In the case of a user is not logged in and tries to access these aformentioned views, the 
user will be rediredirected to the login page. When the user has logged in properly, the user will be able to access these views 
and do transfers securely.

FLAW 5:
Exact source link pinpointing flaw 5:
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/18d9b94069725a849b7e060734a29eef13072d42/src/pages/views.py#L10

Description of flaw 5:
In the existing application there is a Software and Data Integrity failure. The database changes made to acc1 and acc2 within the 
transfer function will not be cancelled if an exception happens within the transfer function. This could result in data integrity 
issues, where the database could be left in a not proper state if something goes wrong during the transfer.

How to fix flaw 5:
The flaw can be fixed by inserting the @transaction.atomic decorator prior to the transfer views, as can be seen in the link above 
where the decorator in question is commented out. The transaction.atomic decorator is used to assure that the changes made to the 
database within the transfer function are treated as a single atomic transaction. If any exception happens during the execution of 
the function, the changes made within the function will be cancelled, and the database will remain intact and unmodified.
