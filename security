LINK: https://github.com/PlatinumFoxTail/CSB_Project_I

FLAW 1: 
Exact source link pinpointing flaw 1: 
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/96999f8c7453229fbd3107007d5682b8f0406280/src/pages/views.py#L23

Description of flaw 1:
The inserted flaw is Cross-site Request Forgery (CSRF). By marking the transfer view with the csrf_exempt decorator, Django does not
require a CSRF protection cookie. Imagine an attacker creates a malicious website with a hidden form that submits a POST request to 
the homePageView on the banktransfer application. The attacker fools an authenticated user to visit the malicious website. Since the 
homePageView is decorated with @csrf_exempt, the server will not require a CSRF token for the POST request. As a result, the user's 
browser unknowingly performs the financial transfer, resulting in unauthorized transactions without the user's approval.

How to fix flaw 1:
To fix the CSRF vulnerability, remove the @csrf_exempt decorator from the homePageView view.

FLAW 2:
Exact source link pinpointing flaw 2: 
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/6dd0c584ad9c5a76c13a0088560a3724096e6310/src/config/settings.py#L109C5-L109C5

Description of flaw 2:
The inserted flaw is a Cryptographic Failure. The application is set to store passwords as unsalted MD5 (Message Digest Algorithm 5) 
hashes. MD5 is a cryptographic hash function that generates a 128-bit hash value from an input data of any length. It is not 
considered anymore secure for cryptographic purposes due to vulnerabilities that allow collisions (when two different inputs produce 
the same hash output) and ease of brute-force attacks. 
With an brute-force attack, an attacker could now try all possible combinations of characters to generate MD5 hashes and compare them 
to the hashed passwords in the database. Since MD5 is quite quick to compute, the attacker can quickly identify matching hashes for 
common passwords, even without the original password data, and get unauthorized access to user accounts.

How to fix flaw 2:
The flaw can be fixed by replacing the unsalted MD5 hash with storng adaptive and salted hashing functions with a work factor (delay 
factor) such as Argon2, scrypt, bcrypt or PBKDF2. These aforementioned are advised by OWASP regarding dealing with cryptographic 
failures related to hash functions. Directly after the flaw as indicated in the link to the flaw, Argon2 hash is uncommented. 
