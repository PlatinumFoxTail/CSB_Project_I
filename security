LINK: https://github.com/PlatinumFoxTail/CSB_Project_I

FLAW 1: 
Exact source link pinpointing flaw 1: 
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/96999f8c7453229fbd3107007d5682b8f0406280/src/pages/views.py#L23

Description of flaw 1:
The inserted flaw is Cross-site Request Forgery (CSRF). By marking the transfer view with the csrf_exempt decorator, Django does not
require a CSRF protection cookie. Imagine an attacker creates a malicious website with a hidden form that submits a POST request to 
the homePageView on the banktransfer application. The attacker fools an authenticated user to visit the malicious website. Since the 
homePageView is decorated with @csrf_exempt, the server will not require a CSRF token for the POST request. As a result, the user's 
browser unknowingly performs the financial transfer, resulting in unauthorized transactions without the user's approval.

How to fix flaw 1:
To fix the CSRF vulnerability, remove the @csrf_exempt decorator from the homePageView view.

FLAW 2:
Exact source link pinpointing flaw 2: 
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/6dd0c584ad9c5a76c13a0088560a3724096e6310/src/config/settings.py#L109C5-L109C5

Description of flaw 2:
The inserted flaw is a Cryptographic Failure. The application is set to store passwords as unsalted MD5 (Message Digest Algorithm 5) 
hashes. MD5 is a cryptographic hash function that generates a 128-bit hash value from an input data of any length. It is not 
considered anymore secure for cryptographic purposes due to vulnerabilities that allow collisions (when two different inputs produce 
the same hash output) and ease of brute-force attacks. 
With an brute-force attack, an attacker could now try all possible combinations of characters to generate MD5 hashes and compare them 
to the hashed passwords in the database. Since MD5 is quite quick to compute, the attacker can quickly identify matching hashes for 
common passwords, even without the original password data, and get unauthorized access to user accounts.

How to fix flaw 2:
The flaw can be fixed by replacing the unsalted MD5 hash with storng adaptive and salted hashing functions with a work factor (delay 
factor) such as Argon2, scrypt, bcrypt or PBKDF2. These aforementioned are advised by OWASP regarding dealing with cryptographic 
failures related to hash functions. Directly after the flaw as indicated in the link to the flaw, Argon2 hash is uncommented. 

FLAW 3:
Exact source link pinpointing flaw 3:
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/a8b8ab964cc0943073148da7e5b2ee4a0ffb148d/src/pages/views.py#L28C3-L28C3
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/593c92cb9156fe05924efd69fcb1e8345d01ba71/src/pages/templates/pages/index.html#L42C13-L42C13

Description of flaw 3:
The inserted flaw is an Injection flaw. In the index.html the amount field type is set as text, allowing users to input any text 
including non-numeric characters. In the views.py, the request.POST.get('amount') is not converting the amount to an integer before 
passing it to the transfer function. This means the transfer function will receive the amount as a raw string without any 
validation or conversion to integer. As a result of the aforementioned, an attacker can manipulate the amount e.g. by typing 
"OR 1=1 --" instead of an actual numeric value. The OR 1=1 would always be evaluated to true and -- indicates a comment, ignoring 
the the rest of the query. As a result, the attacker could gain unauthorized access to account records in the database with harms 
like data theft and unathourized access to sensitive information.

How to fix flaw 3:
The flaw can be fixed by changing the type of the amount in the index.html file from "text" to "number" and also adding int to 
request.POST.get('amount') i.e. int(request.POST.get('amount')) as commented out in the lines below where the flaws are occuring 
(see the links above). By doing so we are double assuring that the amount input is an integer: Firstly validated correctly as an 
integer (index.html, type=number) and secondly converted to an integer (int(request.POST.get('amount')). This prevents effectively 
injection flaws for this specific part of the application.

FLAW 4:
Exact source link pinpointing flaw 4:
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/e596348f9eb44139b561ca85a9052ddd8cbadffb/src/pages/views.py#L11
https://github.com/PlatinumFoxTail/CSB_Project_I/blob/e596348f9eb44139b561ca85a9052ddd8cbadffb/src/pages/views.py#L25

Description of flaw 4:
In the existing application there is an Broken Acess Control flaw. The application lacks proper access control mechanisms, leading 
to a Broken Access Control vulnerability. Without the proper access control mechanisms, anyone including unauthorized users, can 
reach the homePageView and the transfer views and can do account transfer without authorization checks. The flaw could allow 
attackers to potentially manipulate account data or other misuses.

How to fix flaw 4:
The flaw can be fixed by inserting the @login_required decorators prior to the homePageView and transfer views, as can be seen in 
the links above where the decorators in question are commented out. The @login_required decorator will ensure authentication for 
both the homePageView and transfer views. In the case of a user is not logged in and tries to access these aformentioned views, the 
user will be rediredirected to the login page. When the user has logged in properly, the user will be able to access these views 
and do transfers securely.
